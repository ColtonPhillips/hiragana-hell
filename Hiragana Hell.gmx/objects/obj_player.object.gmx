<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();randomize();randomize();randomize();
image_speed = 0.33;
state = "idle";
idle_target_x = x;
idle_target_y = y;
mono_x = 400; mono_y = 220;
idle_pace = 0.5;
idle_ring = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == "idle") {
    if (scr_is_near(x,y,idle_target_x,idle_target_y,3)) {
        idle_target_x = x + irandom_range(-idle_ring,idle_ring);
        idle_target_y = y + irandom_range(-idle_ring,idle_ring);
        idle_target_x = scr_average_of_two(idle_target_x,mono_x);
        idle_target_y = scr_average_of_two(idle_target_y,mono_y);
    }
    else if (scr_is_near(x,y,mono_x, mono_y,50)) { 
        scr_move_away_from(mono_x, mono_y,idle_pace*3);
        //idle_target_x = x + irandom_range(-idle_ring*2,idle_ring*2);
        //le_target_y = y + irandom_range(-idle_ring*2,idle_ring*2);
        //idle_target_x = scr_average_of_two(idle_target_x,mono_x);
        //idle_target_y = scr_average_of_two(idle_target_y,mono_y);
        //move_towards_point(idle_target_x, idle_target_y,idle_pace);
        idle_target_x = x;
        idle_target_x = y;
    }
    else {
        move_towards_point(idle_target_x, idle_target_y,idle_pace);
    }
}
if (hspeed &lt; -0.3 ) scr_sprite_flip_left_if_not();
if (hspeed &gt; 0.3 ) scr_sprite_flip_right_if_not();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>10,10</point>
  </PhysicsShapePoints>
</object>
